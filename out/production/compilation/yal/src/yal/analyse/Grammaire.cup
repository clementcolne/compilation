    package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.expressions.binaire.* ;
import yal.arbre.expressions.binaire.expBool.* ;
import yal.arbre.expressions.binaire.expEntier.* ;
import yal.arbre.expressions.unaire.* ;
import yal.arbre.instructions.* ;
import yal.arbre.declaration.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, ENTIER, EGAL, SI, ALORS, SINON, FINSI, TANTQUE, REPETER, FINTANTQUE, NON, ET, EGALITE, DIFFERENCE, INF,SUP,PLUS,MOINS,DIVISE,MULT,OU, PAR_OUVRANTE, PAR_FERMANTE;
terminal String    IDF, CSTENTIERE;

   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL ;
non terminal Expression EXP ;


/* Precedence */
precedence left OU;
precedence left ET;
precedence left EGALITE, DIFFERENCE;
precedence left INF, SUP;
precedence left MOINS, PLUS;
precedence left MULT,DIVISE;
precedence left NON;
precedence left PAR_OUVRANTE, PAR_FERMANTE;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LDECL:ld LINST:li  FIN
                {: RESULT = li ; :}
        |
               PROGRAMME  IDF  DEBUT LINST:li  FIN
               {: RESULT = li ; :}
               ;

LDECL   ::=     LDECL:ld  DECL:d
                {: ((BlocDInstructions)ld).ajouter(d) ;
                   RESULT = ld ; :}
        |
                DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1) ;
                b.ajouter(d) ;
                RESULT = b ; :}
                ;

DECL    ::=     ENTIER IDF:i POINTVIRGULE
                {: Tds.getInstance().ajouter(new Entree(i), new Symbole("entier", ileft + 1)) ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new Idf(i,ileft + 1), ileft + 1) ; :}
        |
                IDF:i EGAL EXP:e POINTVIRGULE
                {: RESULT = new Affect(e,new Idf(i, ileft + 1), eleft + 1) ; :}
        |
                TANTQUE EXP:e REPETER LINST:li FINTANTQUE
                {: :}
       |
                SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new Condition(e,eleft+1,li); :}
       |
                SI EXP:e ALORS LINST:li SINON LINST:li2 FINSI
                {: RESULT = new Condition(e,eleft+1); :}
       |
                SI EXP:e ALORS SINON LINST:li FINSI
                {: RESULT = new Condition(e,eleft+1,li); :}
       |
                SI EXP:e ALORS FINSI
                {: RESULT = new Condition(e,eleft+1); :}
                ;
    
EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Idf(i, ileft + 1 ) ; :}
        |
               EXP:g MULT EXP:d
               {: RESULT = new Multiplication(g,d,gleft + 1) ; :}
        |
               EXP:g DIVISE EXP:d
               {: RESULT = new Division(g,d,gleft + 1) ; :}
        |
               EXP:g PLUS EXP:d
               {: RESULT = new Addition(g,d,gleft + 1) ; :}
        |
               EXP:g MOINS EXP:d
               {: RESULT = new Soustraction(g,d,gleft + 1) ; :}
        |
               EXP:g INF EXP:d
               {: RESULT = new Inferieur(g,d,gleft + 1) ; :}
        |
               EXP:g SUP EXP:d
               {: RESULT = new Superieur(g,d,gleft + 1) ; :}
        |
               EXP:g EGALITE EXP:d
               {: RESULT = new Egalite(g,d,gleft + 1) ; :}
        |
               EXP:g DIFFERENCE EXP:d
               {: RESULT = new Difference(g,d,gleft + 1) ; :}
        |
               EXP:g ET EXP:d
               {: RESULT = new BoolEt(g,d,gleft + 1) ; :}
        |
               EXP:g OU EXP:d
               {: RESULT = new BoolOu(g,d,gleft + 1) ; :}
        |
               MOINS EXP:e
               {: RESULT = new ExpressionInverse(e,eleft + 1) ; :}
        |
              NON EXP:e
              {: RESULT = new NonExpression(e,eleft + 1) ; :}
        |
              PAR_OUVRANTE EXP:e PAR_FERMANTE
              {: RESULT = new ExpressionParenthese(e,eleft + 1) ; :}
              ;